<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Winging It</title>
  <link href="/feed.xml" rel="self" />
  <link href="/feed.xml" />
  <updated>2011-08-11T07:55:40-04:00</updated>
  <id></id>
  <author>
    <name>Tim Wingfield</name>
    <email>tim@timwingfield.com</email>
  </author>
  
  <entry>
    <title>Coaching In India</title>
    <link href="/2011/08/11/coaching-in-india.html" />
    <updated>2011-08-11T00:00:00-04:00</updated>
    <id>/2011/08/11/coaching-in-india</id>
    <content type="html">
      &lt;h2&gt;Coaching in India&lt;/h2&gt;

&lt;p&gt;My client has an offshore team in Coimbatore, India and I recently spent three weeks there working with them. This group of people is about to become the other part of our development team on our current project. They are joining us, merging their code with ours, all working towards completing the project -- we need to become a team and getting the 8,000 mile wall out of the way was step one.&lt;/p&gt;

&lt;h3&gt;The People&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/coimbatore_team.png&quot; alt=&quot;The People&quot; align=&quot;left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is no process, no technology, no framework that can lead your project to success without the right people. I had no expectations, good or bad, for this group prior to leaving. I had met the team lead as he had traveled to the US for a week, but I knew very little about the others. (&lt;a href=&quot;http://toddkaufman.blogspot.com/2011/07/thank-you-coimbatore.html&quot;&gt;Todd has a great post&lt;/a&gt; summing up his thoughts from the trip. I highly recommend reading it.)&lt;/p&gt;

&lt;p&gt;What we soon discovered was this group was very excited to learn what we were doing. And not only what we were doing, but why we made the decisions we had made. We had already done four months of development so a lot of the groundwork was laid before they saw the code the first time. Unlike standard Ego Driven Developer who would take one look at the code and respond with, “This sucks, I can do this better,” these guys had already dropped that attitude (or never had it) and were ready to learn what was going into the project.&lt;/p&gt;

&lt;h3&gt;The First Few Days&lt;/h3&gt;

&lt;p&gt;The first 2 or 3 days were spent having conversations and finding where everyone was comfortable. Many conversations took place about application structure, domain knowledge, and general practices of the team. It as almost a mini two-day conference that was just focused around our application.&lt;/p&gt;

&lt;p&gt;Also in the first few days the team was very excited to show us the features they had completed prior to our arrival. The code looked fairly clean, but there were a few changes to be made, so they excused themselves to make the changes. Later we figured out why they wanted to leave the room: There had been a large amount of copy/paste development done, and they were still struggling to figure out what this copy/pasted code was doing.&lt;/p&gt;

&lt;p&gt;One thing to note here, they had created cucumber features, and those cucumber features were green. Before we think they had just copied, pasted, and said “We’re done!” they did have acceptance criteria, and they had put those acceptance criteria to work in the form of automated cucumber tests. So even though the code needed some refactoring, and it needed some better unit test coverage, if we would have had to ship the application the next day, their features were functional and developed to our agreed upon acceptance criteria.&lt;/p&gt;

&lt;h3&gt;The Task&lt;/h3&gt;

&lt;p&gt;With the initial conversations out of the way, the task at hand became much more clear. We had a team of talented problem solvers who thought well in C# and general patterns  who needed to be brought up to speed on the practices and tools of our team. Essentially we were down to 12 business days to teach TDD, give a clearer understanding of BDD, get them up to speed on mocking, and get them more comfortable with the ins and outs of git and github.&lt;/p&gt;

&lt;p&gt;If this was an infomercial, I believe this is where I would say, “What would you pay now?!?”&lt;/p&gt;

&lt;p&gt;Don’t answer yet!&lt;/p&gt;

&lt;h3&gt;The Tools&lt;/h3&gt;

&lt;p&gt;Step one was to get some in depth TDD going. The best tool here is the daily code Kata, so we started with the Roman Numeral Kata and Todd and I took a ping-pong pairing approach through the first day as a demonstration. (Ping-pong pairing: one of wrote a test, the other made it pass then wrote the next test. Wash. Rinse. Repeat.) The next day, they did the ping-pong approach through the same problem. Everyday for the rest of our time the team paired on a Kata, switching pairs daily, with step one being to create a new dev branch in their local git repository. (We were using &lt;a href=&quot;https://github.com/PillarTechnology/dot-net-kata&quot;&gt;this empty C# project&lt;/a&gt; for our katas every day.)&lt;/p&gt;

&lt;p&gt;The Katas did a good job laying the groundwork for doing TDD on the features that the team was going to work on while we were there. We did a lot of team coding with the projector so we could collectively work our way through the features. As coaches we were guiding rather than ordering which allowed the team to make and correct mistakes.&lt;/p&gt;

&lt;p&gt;The second exercise we used almost daily was plenty of refactoring. Todd found a sample of some horrid code online that he converted to C# to use as an &lt;a href=&quot;https://github.com/PillarTechnology/RefactoringExercise&quot;&gt;example for practice&lt;/a&gt;. Todd lead the exercise using some simple refactoring rules such as watching out for duplication, nested if statements, large methods, and multiple parameter methods.&lt;/p&gt;

&lt;p&gt;After the introductory refactoring exercise we opened up the features the team had already written and started refactoring. Following the simple refactoring rules Todd had used previously the team went about refactoring their own code. In the first session one of the guys on the team got to delete about 40 lines of code and insert 2, and there were smiles all around the team room as he was doing it. One of the tallest hurdles as a developer is deleting code you have crafted, but this team was deleting it and enjoying it.&lt;/p&gt;

&lt;p&gt;By the time we left the team had refactored all four of the features they had been assigned. Most of the refactoring was done as a group, with a different person at the keyboard each day, to help teach what it means to refactor code. Our last week there the team had taken the initiative on refactoring and I returned from lunch one day with a request to do a code review of their most recent refactoring work. Once again, lots of smiles in the room.&lt;/p&gt;

&lt;h3&gt;The Results&lt;/h3&gt;

&lt;p&gt;I was surprised how much we got taught in such a short amount of time. By leveraging as many exercises as we could, and doing as much hands on as possible, the team picked up the basics of TDD, BDD, and refactoring. We left a wiki full of cheat sheets (or “bits” as such documents are known to our Indian friends) as reminders for all the exercises we had done, and for some other concepts such as our git workflow and some nHibernate tips.&lt;/p&gt;

&lt;p&gt;However, without a group willing to learn and do the work of learning we would have never gotten so far. So a huge credit needs to go to the team for the work they put in to the crash course we were teaching.&lt;/p&gt;

&lt;p&gt;Will they stick with it hard core? I doubt it, most teams will revert to “what they know” when the heat gets turned up. But I think this group will be pretty easy to influence back to their new practices...even from 8000 miles away.&lt;/p&gt;


      
    </content>
  </entry>
  
  <entry>
    <title>Estimation Rant Part Two</title>
    <link href="/2011/06/16/estimation-rant-part-two.html" />
    <updated>2011-06-16T00:00:00-04:00</updated>
    <id>/2011/06/16/estimation-rant-part-two</id>
    <content type="html">
      &lt;h2&gt;Estimation Rant Part Two&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;/2011/05/12/estimation-rant.html&quot;&gt;Estimation Rant&lt;/a&gt; opened the can of worms on estimation. This topic is always a good one on software teams and is sure to drive opinions and discussions around those opinions. Some of those opinions were surfacing in the comments of that post when Blogger decided to flake out. A whole conversation disappearing for a few days is a sure fire way to end said conversation. So why not pick it back up here.&lt;/p&gt;

&lt;p&gt;I have estimated and sized work for both the purpose of sales and  for delivery - they are different exercises. The conversations take place with a different group of people, and the level of detail needed between a sales estimate and a delivery estimate are much different. A sales estimate should not be concerned with scope. Your client has a business problem that needs solved &lt;strong&gt;AND&lt;/strong&gt; they need your help in solving it. Scope at a story point level - or worse, at an hours level - in a sales meeting is doing a disservice to the client and to the delivery team.&lt;/p&gt;

&lt;p&gt;I’m sure a few people are chomping at the bit at that one, that sales shouldn’t be concerned with the scope of a project. That is until you realize the scope of a project will change. Repeat: The scope of a project &lt;strong&gt;WILL&lt;/strong&gt; change. The delivery team is going to tear into the project and they’re going to learn more and more about it. They are going to learn that some concepts are smaller than they initially thought, just as they will learn that some concepts will be more complex than they thought. The scope is definitely going to change, and it will change constantly. When is the last time you built the project you started? Change happens all the time. &lt;a href=&quot;http://twitter.com/#!/aJimHolmes/status/80576009975496704&quot;&gt;Embrace or get ulcers.&lt;/a&gt; (That awesome one-liner courtesy of &lt;a href=&quot;http://twitter.com/#!/jaredrichardson&quot;&gt;Jared Richardson&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;We have a number of tools available to us as agilists that should also help drive the sales process. The concept of a &lt;a href=&quot;http://www.upstarthq.com/2010/04/introduction-to-minimum-marketable-features-mmf/&quot;&gt;minimal marketable feature&lt;/a&gt; (or minimal viable product or minimal value feature, pick your phrase) which is the minimal amount of work that needs to be done to deliver value to your customer. Or the &lt;a href=&quot;http://napkin.highgroove.com/articles/2011/01/20/a-day-in-the-life-of-agile-hands-on-workshop&quot;&gt;value story&lt;/a&gt;, where the business decides the value of a story in dollars prior to making it a project, then prioritizes the work to satisfy the value story. Both those concepts are going to support an iterative development process.&lt;/p&gt;

&lt;h3&gt;Building Software&lt;/h3&gt;

&lt;p&gt;A couple of comments to the prior estimation rant brought up finishing a basement. This steps into one of my biggest pet peeves about our industry: We build software, we’re not basement finishers. We don’t build houses. We don’t build bridges. We don’t build skyscrapers. We create software. Software is soft, it is mutable, and built correctly it can be changed at a low cost. The SOLID principles are solid as an acronym only because each and every principle is concerned with lowering the cost of change. They are about &lt;strong&gt;KEEPING&lt;/strong&gt; software soft. The practice of building software is a knowledge creating process. It’s not a repetition of the same process with the same materials on a different job site.&lt;/p&gt;

&lt;p&gt;In the context of my estimation rant, the number of unknowns in building a software application compared to the unknowns in framing out a basement wall are what leads to the waste of estimations. Take a small feature and develop it. Don’t estimate it, code it. At the end of that feature you’ll have learned more about the system, you’ll have created some value by delivering the feature, and you’ll have an actual time it took to build the feature.&lt;/p&gt;

&lt;p&gt;The size of the East River didn’t change while they were building the Brooklyn Bridge. The size and shape of my basement didn’t change as we finished it. But the scope and size of my project changed &lt;strong&gt;TODAY&lt;/strong&gt; as we found a better way to display data to our users. And it will likely change again tomorrow.&lt;/p&gt;

&lt;h3&gt;Are we agile or not?&lt;/h3&gt;

&lt;p&gt;The traditional way to start bidding was with,  “I have this idea and this much money; I want it done by Tuesday? Can you do that?” Teams would clamor for the business, put a bid in to win the project, get the business, then spend weeks in a detailed contract negotiation detailing what the deliverables would be. When development started and the actual scope got out of hand, they would change control the hell out of it to keep it profitable.&lt;/p&gt;

&lt;p&gt;But if we move to an agile bidding process, we can start the conversation with, “I have this idea and this much money, how much of my idea can I get?” Then we can prioritize some features, possibly very large features, and get to work on it. Line three of the &lt;a href=&quot;http://agilemanifesto.org/&quot;&gt;agile manifesto&lt;/a&gt;: Customer collaboration over contract negotiation. Which is not to say we don’t enter into a contract, we most certainly will. However the conversation in determining what can be delivered to satisfy the customer's business need should lead to that contract, not be hindered by the contract. Your contract is there to protect both parties, but it should not be written down to the detail level that allows one or both parties to hide behind it in order to “win” the engagement.&lt;/p&gt;

&lt;p&gt;Obviously trust is going to be a big factor here, as you just can’t say, “We’ll do it all agile like! Trust me!” Trust will need to be built, and the easiest way to build it is to be open and honest with all your communication. Be professional. Start small and build it from there. If there is no trust between you and your client there is no contract out there that will force it to happen.&lt;/p&gt;

&lt;p&gt;A friend and colleague was working on a project recently where they are doing that incremental trust building, introducing agile, and having their ups and downs. In one case they proposed an approach to solving one of the client’s problems, and client replied with: &lt;em&gt;“Your competitors have proposed a solution, and they already know and have priced out what they will need to build, whereas you just proposed an approach.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That is a pretty straightforward response, and one that fits directly into traditional project bidding. So my friend’s reply was definitely not traditional: &lt;em&gt;“Nobody knows exactly what you need built; not you, not them, not us. The difference here isn’t that they have a solution, it’s that we are not lying to you to try to win your business.”&lt;/em&gt; Open and honest communication.&lt;/p&gt;

&lt;h3&gt;Last Word on Estimation&lt;/h3&gt;

&lt;p&gt;I was in attendance at Agile Dev Practices West recently and got to see &lt;a href=&quot;http://lindarising.org/&quot;&gt;Linda Rising’s&lt;/a&gt; &lt;a href=&quot;http://www.sqe.com/AgileDevPracticesWest/Keynotes/Default.aspx#tk1&quot;&gt;keynote address “Deceptions and Estimating: How We Fool Ourselves.”&lt;/a&gt; Linda had many studies and examples of how we as humans are overly optimistic at most things in life: How we drive, what we eat, and how we estimate software. We have learned that we are so bad at estimating software that we will spend extra time on the estimation in order to get it as accurate as possible, only to fail at it again.&lt;/p&gt;

&lt;p&gt;Why do we keep spending money on an estimation that is wrong? Sometimes wildly wrong? Doesn’t it make more sense to spend money on building it?&lt;/p&gt;


      
    </content>
  </entry>
  
  <entry>
    <title>Moving The Blog</title>
    <link href="/2011/06/07/moving-the-blog.html" />
    <updated>2011-06-07T00:00:00-04:00</updated>
    <id>/2011/06/07/moving-the-blog</id>
    <content type="html">
      &lt;h2&gt;Moving The Blog&lt;/h2&gt;

&lt;p&gt;With the &lt;a href=&quot;/2011/05/12/estimation-rant.html&quot;&gt;Estimation Rant&lt;/a&gt; quickly becoming my most popular blog post and generating a good discussion in the comments, Blogger decided that was the day to start doing random deletions of comments and later posts. I have been leaning towards moving off the Blogger platform for a while, but being lazy and it mostly working, I didn’t move anything around. Since “mostly working” went out the window, it was time to move the blog.&lt;/p&gt;

&lt;p&gt;But where to? I’ve always wanted to have a bit more control over where my content lived. I used the FTP upload option on blogger which kept the content on my own hosted server, but they discontinued that a couple years ago. I thought about moving to an installed WordPress blog, but that whole lazy thing kept me from pursuing that one too far. What about the blog hosted on WordPress? Why leave Blogger if that’s the choice.&lt;/p&gt;

&lt;p&gt;Then I stumbled upon &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;. Followed a &lt;a href=&quot;https://github.com/mojombo/mojombo.github.com&quot;&gt;few links&lt;/a&gt; to some other &lt;a href=&quot;https://github.com/joefiorini/userobsessed&quot;&gt;Jekyll sites&lt;/a&gt; then to how &lt;a href=&quot;http://pages.github.com/&quot;&gt;github pages&lt;/a&gt; works and made my decision. My content lives on github rather than in some database somewhere, and it exists as plain html files. The power and storage of github behind a blog being served up as plain HTML files? Awesome! Publishing by typing &lt;code&gt;git push origin master&lt;/code&gt;? Geek points out the wazoo!&lt;/p&gt;

&lt;h3&gt;Setting Up The Jekyll Site&lt;/h3&gt;

&lt;p&gt;Step 1 was to toy around with Jekyll some and see what was involved. Essentially do a quick spike of Jekyll and see if it was going to work. About an 3 hours into my spike, I had an html template in place, four of five test blog posts, and an about page. Decision solidified. I laid out the steps between where I was and where I wanted to be to get it launched and went to work. If you're the kind that flips to the back of the book to see how it ends, it took me roughly two weekends to complete the move and get it published.&lt;/p&gt;

&lt;p&gt;The first hurdle I ran into was running Jekyll plugins on github. I had added a plugin to generate category links for me based on the categories in my blog posts. Pretty straightforward, but not handled by base Jekyll functionality. Everything worked fine locally, push to github and no categories. Looked around some, find the right page of the manual to complete my RTFM, and found that github doesn't run any code in the _plugins directory as it is untrusted code. Seemed a good enough reason to me, and the fix was pretty simple. Generate the site locally, add the categories directory that gets generated to the root directory of the project, then &lt;code&gt;git push origin master&lt;/code&gt; and the categories are there. &lt;em&gt;(I’m not sure this is the best solution, but it is a solution.)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Migrating From Blogger&lt;/h3&gt;

&lt;p&gt;This was the real PITA for the whole move. There were a couple suggestions on how to automate the move, but I had no luck with either of them. In the end I settled on doing it all by hand, which really wasn't that hard. Copying from the blogger dashboard into markdown required very few edits. If I was moving more than the 60 or so posts I had, I would have probably found a way to script an import or something. I figured I could copy/paste my way through it quicker than scripting it out, so brute force won the day.&lt;/p&gt;

&lt;p&gt;The smallish edits I had to make were what you would expect. Recreate some formatting - bold, italics, headings, etc - add the images back in, and add the links back to the posts. My earlier blog posts were easy as I was really lazy back then with few headings, links, and images. My more recent ones where I have decided to add a few more pieces of flair took a little longer to recreate in copy/paste mode.&lt;/p&gt;

&lt;p&gt;That said, if I had it to do over, I would probably brute force it again. If I had closer to 100 posts to migrate, I would probably opt for creating some kind of migration script.&lt;/p&gt;

&lt;h3&gt;Migrating the Comments&lt;/h3&gt;

&lt;p&gt;The few comments I had on the blog I didn't really want to lose. What seemed to be the obvious choice here was to migrate to Disqus. They are everywhere, manage threads, help keep down spam, and hit right at my price point of free. The migration was a little trial and error for me, though.&lt;/p&gt;

&lt;p&gt;My first try was to just import them from Blogger. Disqus has an automated way to do that, it took all of 4 minutes to complete the process. However, I had no good way to link my newly imported comments back to they’re original blog posts. Disqus will relate comments to posts in one of two ways, a unique identifier you provide them or the blog post url. I had no way to give them a unique identifier, and the url for each post was about to change.&lt;/p&gt;

&lt;p&gt;After a little more research, I found that Disqus provides some tools for more complex blog migrations to keep your posts and comments linked up. (I'm telling you, the people at Disqus have thought of EVERYTHING!) So I redid the import to blogger, but instead of just importing the comments I installed Disqus as the commenting system on the existing blog. Then I had to do a quick CSV file to map the old url to the new url and upload that to Disqus. About an hour later, the comments appeared on the new blog. (The new blog was still not &quot;live.&quot; It was running on local host and at timwingfield.github.com, but the comments were there.)&lt;/p&gt;

&lt;h3&gt;Still On the Todo List&lt;/h3&gt;

&lt;p&gt;Sunday I &quot;pushed the button&quot; and swapped the DNS around to point at github rather than at blogger, and about an hour after that switch the DNS had refreshed to the point that I was seeing the new blog. But now that I have the level of control over my blog that most geeks like to have, I’ve got plenty on the todo list.&lt;/p&gt;

&lt;p&gt;I still want to add some more features to the index page, starting with getting a comment count and link under each post to go directly to the post. I would also like to revisit that publishing the categories thing from above. Initial thoughts are I will end up with some little rake script or something to handle it, but may do some more looking. A dedicated mobile interface would be nice. Jekyll has the ability to publish at a given time, so I will need to spike that one out to see what I need to do.&lt;/p&gt;

&lt;p&gt;One week into this little experiment and I am liking it. I feel like I'm more in control of my content, I have a better comment system than before, and publishing is git push. Big fun!&lt;/p&gt;


      
    </content>
  </entry>
  
  <entry>
    <title>Estimation Rant</title>
    <link href="/2011/05/12/estimation-rant.html" />
    <updated>2011-05-12T00:00:00-04:00</updated>
    <id>/2011/05/12/estimation-rant</id>
    <content type="html">
      &lt;h2&gt;Estimation Rant&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/estimation_rant.png&quot; alt=&quot;I feel an estimation rant coming on&quot; align=&quot;right&quot; /&gt;
Estimation is a bad word on dev teams. We have learned from many painful estimation debacles to the point we cringe when we hear the word, &quot;Estimate.&quot; In many software endeavors estimating is a necessary practice, at least on some levels, to get the thumbs up to start writing software in the first place. But just because we have done estimating activities often, does not mean we are good at it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: I am discussing estimation in the context of delivery, not sales. Clients everywhere want to know when something will be done before they commit money to it, which is why many talented sales people drive fancy cars.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;Failing Into the Hours Trap&lt;/h3&gt;

&lt;p&gt;The very first failure of many estimating exercises is estimating your tasks, stories, and features in hours - or days or weeks or years. Any unit of time measurement is likely going to get you in trouble, but we will stick with hours for our example. Yes, hours fit neatly into a column in Microsoft project, but for estimating a development effort your setting yourself up for failure as soon as you choose hours as your unit of measure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/dages_estimation.jpg&quot; alt=&quot;Ready! Aim! Estimate!&quot; align=&quot;left&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first trap in using hours is we are all going to base that guesstimate on the 8 hour work day. If you commit to 8 hours, you are essentially saying that you will have that feature done in a day. Your manager is definitely hearing &quot;one day&quot; when you say 8 hours. If you could sit and code for 8 hours straight, maybe that estimate would be worthwhile. But how often do you get to code 8 straight hours? All kinds of things happen that derail that 8 hour day of uninterrupted coding. The stand up, other meetings, lunch, nature will inevitably call, and there's a better than average chance a Nerf war will break out in many team rooms.&lt;/p&gt;

&lt;p&gt;The second trap of hours is they really only get used as a measurement when you go over your estimate. For example...&lt;/p&gt;

&lt;p&gt;Let's take a developer on our team, we'll call him Jeff. In our estimation meeting, the team has determined that feature #1337 will take 16 hours to complete. Based on our previous trap we all just heard, &quot;Two days.&quot; Jeff pulls feature #1337 off the board Monday morning and gets to work. Wednesday afternoon, he moves it to dev complete. Whoa, that feature just took 24 hours to complete! Come on, Jeff, you're 8 hours over the estimate? How will we ever make that time up?? We're on a deadline here!!&lt;/p&gt;

&lt;p&gt;Sorry...all accusations are purely hypothetical.&lt;/p&gt;

&lt;p&gt;The next Monday morning we're back at work, and our trusty developer Jeff looks on the board and sees feature #1355 on the board estimated at 16 hours. He pulls the card into the development queue and gets to work on it. At the end of the day he's done. 8 hours into his 16 hour feature he moves it to dev complete. Way to go Jeff!! You rock! Best developer ever!!&lt;/p&gt;

&lt;p&gt;But hold on a second. Our rock star dev has missed his estimate by 50% in both cases. In one he's the villain and the other the hero? He goofed by 50% but thanks to &quot;beating the hours&quot; on the second feature that gets lost. In reality we should be asking Jeff why he missed each estimate. That will help us learn where we as a team missed and how we can apply that to future guesstimation exercises.&lt;/p&gt;

&lt;h3&gt;The Cost of Estimation&lt;/h3&gt;

&lt;p&gt;During a lunch conversation at a past conference I listened to a gentleman tell us how he was contracted to do a 6 month estimation on what it would cost to build a certain piece of software. Two weeks into the contract, one that was paying him quite well, he went to his stakeholders and said, &quot;The amount of money you are sinking into the estimation contract will never be returned to you. You will never get $1 back from it, how about I just start building the software and we'll see where we are in 5 and a half months?&quot; They went for it, and he won the development contract 5 and a half months later.&lt;/p&gt;

&lt;p&gt;The estimate means nothing to the actual delivery of the software. One of my former managers used to say, &quot;The effort is the effort is the effort.&quot; The iron triangle of software is scope, timeline, and quality. We're allowed to fix any two of them, but the third has to be flexible. (It's scary how many times quality is the one that gets forced to flex.) Our estimate won't change any of the three points on the iron triangle.&lt;/p&gt;

&lt;h3&gt;All Is Not Lost&lt;/h3&gt;

&lt;p&gt;Fear not, there are ways to get your software written without falling into estimation traps, and giving those outside the team a reasonable idea of when something will be delivered.&lt;/p&gt;

&lt;p&gt;First up is story points. Story points are a representation of the &lt;a href=&quot;http://blog.mountaingoatsoftware.com/its-effort-not-complexity&quot;&gt;level of effort&lt;/a&gt; the team thinks it will take to complete a story. Story points can be anything. I have seen teams use numbers such as 1, 3, 5, and 8 as their points, and other teams will use t-shirt sizes such as S, M, L as points. One team I saw &lt;strong&gt;REALLY&lt;/strong&gt; wanted to drive home the fact that story points are relative, so they went with duck, unicorn, and elephant as their sizes. Using any of those units of measurement illustrates that story points are used relative to each other rather than to a fixed value such as hours. Humans are very good at doing comparisons, so we don't know exactly how big a unicorn story is, but we know an elephant story is bigger.&lt;/p&gt;

&lt;p&gt;Another way to step away from estimations is to move to a continuous flow system. Get yourself a Kanban board, get rid of iterations and iteration commitments, and start tracking the cycle time on the completed side of things. There are a few challenges with going this way, the first being that you will not have a reasonable idea of your cycle time until you have pulled a few stories through the system. Additionally sizing may still come into play because stories have this habit of never being exactly the same size. But, get through a few cycles, get some actual times on features from concept to completion, and you'll be handing your managers actual times from which they can plan future work. It may take a little time to get the data, but there isn't a manager in an IT department anywhere that wouldn't love to hear, &quot;This story is sized as a small for our team and small features take us about 2 days to complete. Come back Wednesday, we should have it for you.&quot;&lt;/p&gt;

&lt;p&gt;The last way to get rid of estimation is just to get rid of estimation. Like the story where the gentleman stopped researching on the estimation contract and just started writing code, just write the freakin' code! That could make for some difficult conversations at some point, but if your 4 person dev team is in a 2 hour estimation meeting every iteration, that's 8 hours you could have spent writing code towards a deliverable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;/rant&amp;gt;
&lt;/code&gt;&lt;/pre&gt;


      
    </content>
  </entry>
  
  <entry>
    <title>How We Do a Retrospective</title>
    <link href="/2011/04/21/how-we-do-a-retrospective.html" />
    <updated>2011-04-21T00:00:00-04:00</updated>
    <id>/2011/04/21/how-we-do-a-retrospective</id>
    <content type="html">
      &lt;h2&gt;How We Do a Retrospective&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/hard_hats_required.jpg&quot; align=&quot;left&quot; alt=&quot;Hard hats required&quot; /&gt;
There is no one right way to do a retrospective, there are many good techniques...and a few bad ones. Utilizing more than one technique is a good way to get different conversations going with your team, and expose different areas that could use a little fixin'. That said, I do have a &quot;tried and true&quot; technique that we've used on a number of teams over the years. It's usually pretty good at getting the conversation going, and can be done in 30 minutes or less to keep you from being stuck in &quot;yet another meeting.&quot;&lt;/p&gt;

&lt;p&gt;First things first, at the start of any retrospective you should review the action items or results from the previous iteration's retrospective. Have the people assigned to each item report how it went and what got accomplished. Nothing gets a retro off to a good start like saying, &quot;Remember that problem we had last week? It's fixed!&quot;&lt;/p&gt;

&lt;h3&gt;A Few Supplies and a Little Preparation&lt;/h3&gt;

&lt;p&gt;We're going to need:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Three colors of sticky notes. Regular square ones will work fine. For this example we're going to use purple, yellow, and green.&lt;/li&gt;
&lt;li&gt;A box of pens, preferably all the same kind. I like to use sharpies because big pens on small paper ensures we get short items on each card rather than essays. Using the same pen also keeps things a little more anonymous.&lt;/li&gt;
&lt;li&gt;A whiteboard. In the absence of a whiteboard the big easel sheets would do the trick.&lt;/li&gt;
&lt;li&gt;A timer of some kind. I picked a timer up for about $200...it also makes phone calls, surfs the web, plays Angry Birds and sends text messages and email. It's high end for a timer, but it does the trick.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;For the prep work, take our three colors of sticky notes and split them up so each member of the team has a few of each color. The number really doesn't matter, but we usually end up with 6 to 8 of each color for each person. Give each member of the team their own little pile of sticky notes and a sharpie.&lt;/p&gt;

&lt;h3&gt;Gather The Data&lt;/h3&gt;

&lt;p&gt;The colors signify good, bad, and confusing items from the previous iteration. Since we went with purple, yellow, and green we'll say that purple = pain, yellow = confusing, and green = good. Set the timer for 5 minutes and have the team write as many items as they can think of for each color from the previous iteration. They should do this on their own, writing their own thoughts down, we'll collaborate and discuss later. If your team is smaller and iterations are pretty short, put less than 5 minutes on the clock.&lt;/p&gt;

&lt;p&gt;When the time is up, have each team member walk to the white board and stick their notes on the board. No order to them, just get them on the wall. Once all the stickies are on the wall, take a couple of volunteers to group them by subject, not by color. We're not looking for all the bad things that happened in one cluster, we're after what was good and bad about a given subject to the team. Aim for 4 to 8 categories, and try not to get them too broad. Once you have your categories, circle them and put a one or two word title above the cluster. It should look something like this...&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/retro_board.jpg&quot; alt=&quot;retrospective board&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Discuss&lt;/h3&gt;

&lt;p&gt;We've got things broken down, next up we have to decide what we're going to tackle. Best way to do this is to Dot Vote. Dot voting is an old stand by in agile. Each team member gets 2 or 3 votes and they place a dot next to the category they want to discuss. If they think a category is very important they could put all three of their dots next to that category. We do want each team member to use their votes though, abstaining isn't allowed.&lt;/p&gt;

&lt;p&gt;When everybody has voted we'll discuss the top two vote getters and try to pull an action item or two out of each category. Do a quick run through of each sticky, set the timer at 10 to 15 minutes, and get to discussing. Try to involve everybody in the discussion as well. Since everybody contributed to the stickies on the wall it should be easy to get the quieter folks to speak up as they likely added a note to the category.&lt;/p&gt;

&lt;h3&gt;What Are the Goals Here?&lt;/h3&gt;

&lt;p&gt;Goal numero uno in this set up is to get everybody to put stickies on the wall with what they thought went good or bad or confused them during the last iteration. By doing this we have everybody involved in the retrospective right away, and increases the likelihood of them speaking up during the discussion.&lt;/p&gt;

&lt;p&gt;The second thing we're after is discussing categories of issues rather than smaller issues raised by one person. The goal of any retrospective is to look back and see what we can do to make the whole team better, not just what the loudest, type A personality, Alpha-Dev wants fixed to make his life better. By categorizing everybody's issues we can compare what everybody thinks, discuss the broader issue, and derive a good actionable, assignable action item from that.&lt;/p&gt;

&lt;h3&gt;Some Issues: Learn From My Mistakes&lt;/h3&gt;

&lt;p&gt;Doing this, or any, retrospective style 6 or 8 or 10 retrospectives in a row will stop yielding good results. That happened with one of my teams and we kind of got in a rut. Once in that rut the retrospective became an &quot;Airing of Grievances&quot; (minus the festivus pole) and we weren't getting good action items. In reality, we were getting bad attitudes towards the retrospective and incremental change was not coming our way.&lt;/p&gt;

&lt;p&gt;One particular retrospective we had done the categorizing and completed our voting and a sticky note from one member of the team had not made it into a category we were going to discuss. In order to get it discussed, the owner of the sticky moved it into a category we were going to talk about. It was posed to the team if we should leave it, and the consensus was it wasn't there for the voting, it shouldn't go in now. The offender wasn't too happy with this decision and slapped it back in to be discussed...at which time one of us removed it, tore it up, and threw it away. Team over individual in the retro. Always.&lt;/p&gt;

&lt;p&gt;As noted earlier, and solidified with my first issue above, this isn't the only way to do a retrospective and it shouldn't be used iteration after iteration. However, it does get the conversation going and it will usually yield an item or two that your team wants out of its way. Give it a shot the next time you have a retrospective.&lt;/p&gt;


      
    </content>
  </entry>
  
  <entry>
    <title>Action Items Round Two</title>
    <link href="/2011/04/19/action-items-round-two.html" />
    <updated>2011-04-19T00:00:00-04:00</updated>
    <id>/2011/04/19/action-items-round-two</id>
    <content type="html">
      &lt;h2&gt;Action Items Round Two&lt;/h2&gt;

&lt;p&gt;In &lt;a href=&quot;/2011/04/14/action-items-the-results-of-the-retrospective.html&quot;&gt;my last post&lt;/a&gt; I discussed keeping your action items assignable and actionable. In the days since that post went out, I've seen a few more things to add to the subject of action items. We're agile, we're all about continuous improvement.&lt;/p&gt;

&lt;h3&gt;Action Items Are To Improve Team Workflow&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/film_chalkboard.jpg&quot; align=&quot;right&quot; alt=&quot;Action!&quot; /&gt;
Action items are things the team agrees to try in their next iteration to improve a process which is giving them trouble. In otherwords the team has identified a problem in how they're getting their work done and the action item they've decided on should help fix that problem. Some examples of action items I've seen on team boards in the past...&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add Work In Progress limits to our scrum board.&lt;/li&gt;
&lt;li&gt;Make our Product Owner the single point of contact for our field engineers to limit the context switching of developers.&lt;/li&gt;
&lt;li&gt;Add a large, red light outside our team area to let the rest of the office know that the team is in heads down &quot;quiet time&quot; and shan't be interrupted.&lt;/li&gt;
&lt;li&gt;Try planning poker at our next planning meeting.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;If the item would go straight to the value stream of your project, meaning it's something you are going to work on that will apply directly to your deliverable, then I usually don't classify it as an action item. Things that gostraight to your deliverable are typically specific features, setting up hardware, and technical spikes. (More on those in a sec.)&lt;/p&gt;

&lt;p&gt;Not every retrospective will yield action items and that's OK. If you're doing short iterations and are humming right along, you may have a very short retrospective and be pretty happy with how everything went. There's nothing wrong with NOT having a problem on your team.&lt;/p&gt;

&lt;h3&gt;Technical Spikes&lt;/h3&gt;

&lt;p&gt;Spikes are meant to answer a question and should be time boxed. This stems from a couple things we as developers are very good at: Taking too long to come up with an answer and going off in the weeds, down a number of tangents and returning with what we think is the absolute perfect solution. Enter the technical spike. Limit our off in the weeds time, give us a definite end time, and force us to come up with &lt;strong&gt;A&lt;/strong&gt; solution prior to coding it into the &lt;strong&gt;PERFECT&lt;/strong&gt; solution.&lt;/p&gt;

&lt;p&gt;Why don't I think spikes are action items? Because in the long run they should be answering a question about something that will likely go straight to the value stream of the project. Usually we're answering a question about some portion of code that's new to us, a framework we haven't used before, or something along those lines. These questions need to be answered for us to deliver our product, not necessarily to improve the team, its process and its flow. (Though not delivering our product will most decidedly have a negative impact on the team.)&lt;/p&gt;

&lt;p&gt;An an example of what I mean, I have a spike assigned to me right now to look into a GUI testing framework for our project. This is clearly a question for us, and not something that I need to do to improve the next iteration and beyond. It's something that will provide direct value to our client.&lt;/p&gt;

&lt;p&gt;So, let's say I finish my spike and settle on Selenium as our GUI testing framework of choice. After three or four iterations we see that our selenium tests are getting quite large and out of hand, at that point the team would probably identify an action item to clean those tests up. (And we would of course assign a steward to oversee that clean up.)&lt;/p&gt;

&lt;h3&gt;The Working Agreement&lt;/h3&gt;

&lt;p&gt;In my last post I got a very good comment from Fanlan:&lt;/p&gt;

&lt;p&gt;At my company, we distinguish between tasks (Action items) and working agreements. &quot;We will do a peer (code) review when we think we have finished a user story&quot; is an example of a working agreement.&lt;/p&gt;

&lt;p&gt;Many of the teams I've been on we haven't been too explicit with our working agreements, though I think that's a mistake on our part as I do like being more explicit about team workings. Leaving things open for interpretation rarely goes the way you wanted it interpreted, so I do like Fanlan's suggestion here.&lt;/p&gt;

&lt;p&gt;In my example our team was going to try out code reviews and added them as an action item for the next iteration. In that context we don't know if code reviews will work for us or not, so we're going to run with incremental change and see how it goes. In another example we may want to add WIP limits to our team board, but after a couple of iterations they may not change our flow. If all goes well with our action items then I'd add the new practices explicitly to that working agreement for the team, but we should go through the &quot;try before we buy&quot; period before full adoption by the team.&lt;/p&gt;

&lt;p&gt;Incremental change is a big deal in making your teams and your deliverables go better. Work at those retrospectives and their resulting action items, you'll see those improvements start to take hold.&lt;/p&gt;


      
    </content>
  </entry>
  
  <entry>
    <title>Action Items - The Results of the Retrospective</title>
    <link href="/2011/04/14/action-items-the-results-of-the-retrospective.html" />
    <updated>2011-04-14T00:00:00-04:00</updated>
    <id>/2011/04/14/action-items-the-results-of-the-retrospective</id>
    <content type="html">
      &lt;h2&gt;Action Items: The Results of the Retrospective&lt;/h2&gt;

&lt;p&gt;One of the principles of agile is incremental change. Looking inward on what your team is doing that could be better is one way to get that incremental change, and team retrospectives are a great way to do that looking inward. If you're not familiar with team retrospectives, essentially they're a fairly informal gathering where teams bring up issues and kudos over recent work and decide on a few things that they want to improve. The things they decide to improve are usually called Action Items.&lt;/p&gt;

&lt;p&gt;Having been on a few agile teams and taken place in many a retrospective there are a couple of things that come to mind in regards to action items.&lt;/p&gt;

&lt;h3&gt;Make Your Action Items Actionable&lt;/h3&gt;

&lt;p&gt;Ok, that sounds a little on the obvious side, and it can be. But it's a very real problem with many action items.&lt;/p&gt;

&lt;p&gt;A team gathers and they find an issue with their code. For example our team is working on a large, old code base. There are many pieces of it that are just scary to change. So the team brings this up at the retrospective. Many people have issues on the board such as, &quot;code is scary to change.&quot; Or something like &quot;our code is difficult to work with.&quot; And since it's a dev team somebody has probably taken a little initiative and just put, &quot;Code SUCKS!&quot; up on the board. After some discussion the team has decided on an action item of: Improve the Code.&lt;/p&gt;

&lt;p&gt;The whole team is there, managers, product owners, QA folks, everybody, and they settle on &quot;Improve the Code&quot; with some gusto. This is an item we KNOW we need to do and the whole team is behind it. If we're going to succeed, we need to IMPROVE THE CODE!&lt;/p&gt;

&lt;p&gt;But our (somewhat) hypothetical team has missed the important part of this action item: HOW do we improve the code? Just saying &quot;improve the code&quot; is the dev team equivalent of saying, &quot;Well, duh.&quot; We're always striving to improve the code, but what's that first step? Make sure your action items are indeed items and not overall team goals.&lt;/p&gt;

&lt;p&gt;Drag the discussion a bit further. Start asking questions when you settle on a broad action item such as this. If you start digging, you'll arrive at that first step to your bigger goal. For example, our team notices that they have a small seam in their code where they could get their data layer wrapped in an adapter and add some more testability to both sides of that data layer. Now they have an actionable action item: Wrap Data Layer in an Adapter.&lt;/p&gt;

&lt;h3&gt;Make Your Action Items Assignable&lt;/h3&gt;

&lt;p&gt;The next retrospective comes around, and we working hard at getting actionable action items. After some discussion, we realize that we could use a quick code review before we move our features to &quot;development complete.&quot; Performing a code review is pretty actionable, and everybody on the team can participate. Our team is happy with this action item and they decide to tackle it the next iteration. They've also decided to assign it to &quot;Everybody.&quot;&lt;/p&gt;

&lt;p&gt;So they just assigned it to nobody.&lt;/p&gt;

&lt;p&gt;It's human nature, if everybody is assigned to a team task to complete of their own free will, nobody will take care of it. Code reviews will likely not happen, and we'll arrive at the next retrospective with everybody looking at each other thinking, &quot;I thought somebody else would take the lead on that.&quot;&lt;/p&gt;

&lt;p&gt;Even if your action item probably does need to be done by everybody on the team, as would be the case with our code review example here, assign it to one person to oversee that it actually happens in the iteration. Make that person a steward of the action item. This person likely needs to do nothing more than bring up at the first stand up to remember our code reviews, then later volunteer to do the first one and the ball will be rolling. Additionally, at the next retrospective the team has a person that is accountable to report back on the results of that action item from the previous iteration.&lt;/p&gt;

&lt;p&gt;Retrospectives are great tools, possibly the greatest tool for incremental change. Keep an eye on those action items and keep them actionable and assignable.&lt;/p&gt;


      
    </content>
  </entry>
  
  <entry>
    <title>pik, IronRuby, MRI, and a .Net Project</title>
    <link href="/2011/04/12/pik-ironruby-mri-and-a-net-project.html" />
    <updated>2011-04-12T00:00:00-04:00</updated>
    <id>/2011/04/12/pik-ironruby-mri-and-a-net-project</id>
    <content type="html">
      &lt;h2&gt;pik, IronRuby, MRI, and a .Net Project&lt;/h2&gt;

&lt;p&gt;On a recent ASP.Net MVC project I was leveraging IronRuby and Cucumber to get some BDD specs in place to drive development. Though this post isn't about the benefits of BDD, it was very easy to get the specs worked out with my Product Owner, and the demos went really quickly. For the most part, I was using IronRuby to run functional tests at the controller level.&lt;/p&gt;

&lt;p&gt;Then we decided to add on some GUI tests. With Ruby and Cucumber already in place, we decided to give watir a try. Except once we went on to using watir, IronRuby was no longer needed to test the website. We could instead use MRI 1.9.2 as our interpreter and get a little more speed out of our watir tests, and leverage the latest version Cucumber.&lt;/p&gt;

&lt;p&gt;Since we're doing our development in Windows we don't have the luxury of RVM, but pik is a great solution to switching Ruby interpreters on Windows. During development, a few pik switch statements keeps all our cucumber tests in sync with either our IronRuby testing or our watir testing. However, if we wanted to run them all at once I had to write a little batch file to handle it. (I'm a dev, I'm lazy, I just want to type one line in the command prompt and have it all kick off...)&lt;/p&gt;

&lt;p&gt;After knocking the rust off my batch file fu, here is the contents of that batch file...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@echo off
@call pik sw 100
@call rake
@call pik sw 192
@call rake watir
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here's what's happening in our little five line helper file. First line just doesn't echo your commands back out to the command prompt. After that we call pik sw 100, which is pik switch to IronRuby 1.0.0. Then our default rake task is called, which builds the project, runs the unit test suite (in nUnit in this case), then run the IronRuby cucumber tests. pik sw 192 is switching to Ruby 1.9.2, then calling rake watir just runs our watir tests against the already built website. Pretty straightforward.&lt;/p&gt;

&lt;p&gt;Now that was only for our dev machines in order to do one line build test, test, test during development. Our CI server was much easier to configure.&lt;/p&gt;

&lt;p&gt;We were using TeamCity as our CI environment when we added watir to the mix, but the batch file wasn't needed as TC allows for different build tasks to use rake and specify which interpreter to use. So it was as easy as add an IronRuby build task call the default rake task, then create another rake build task and call the watir task in the rake file. We have since switched from TeamCity to Jenkins, but the set up with a build task per interpreter is identical.&lt;/p&gt;

&lt;p&gt;(Don't have pik installed and you're a Windows using, Ruby loving programmer? &lt;a href=&quot;http://bit.ly/gHB7d0&quot;&gt;Ben Hall's post&lt;/a&gt; on getting pik installed and running is the best reference I've found.)&lt;/p&gt;


      
    </content>
  </entry>
  
  <entry>
    <title>Upcoming Speaking Events</title>
    <link href="/2011/04/11/upcoming-speaking-events.html" />
    <updated>2011-04-11T00:00:00-04:00</updated>
    <id>/2011/04/11/upcoming-speaking-events</id>
    <content type="html">
      &lt;h2&gt;Upcoming Speaking Events&lt;/h2&gt;

&lt;p&gt;Trying to slow down the speaking and associated travel schedule this year, but not giving up on it entirely. So, here's what I've got coming around the corner...&lt;/p&gt;

&lt;h3&gt;Stir Trek&lt;/h3&gt;

&lt;p&gt;On May 6th, &lt;a href=&quot;http://stirtrek.com/&quot;&gt;Stir Trek&lt;/a&gt; happens again. This has quickly grown into one of the region's more popular conferences, and it's only a one day thing. I'll be presenting &quot;&lt;a href=&quot;http://stirtrek.com/Sessions#Executable-Requirements-Testing-in-the-Language-of-the-Business&quot;&gt;Executable Requirements: Testing in the Language of the Business&lt;/a&gt;&quot; in the Testing Track there this year. There's something cool about seeing your slides on a movie screen. There's also something daunting about following &lt;a href=&quot;http://twitter.com/#!/jimweirich&quot;&gt;Jim Weirich&lt;/a&gt; on the schedule...&lt;/p&gt;

&lt;h3&gt;Columbus Ruby Brigade&lt;/h3&gt;

&lt;p&gt;On May 16th I'll be presenting at the &lt;a href=&quot;http://columbusrb.com/&quot;&gt;Columbus Ruby Brigade&lt;/a&gt;. It's not directly a Ruby topic, but the good folks at CRB have been kind enough to give me an hour to present &quot;The What's, Why's, and How's of Kanban.&quot; So, it's not specifically for the Rubyists, but Kanban is good for everybody! If you're thinking, &quot;Really? The Kanban talk AGAIN??&quot; Yes, again, because I need the practice for...&lt;/p&gt;

&lt;h3&gt;Agile Dev Practices&lt;/h3&gt;

&lt;p&gt;June 9th I have the honor to be on stage at &lt;a href=&quot;http://www.sqe.com/AgileDevPracticesWest/&quot;&gt;Agile Dev Practices West&lt;/a&gt;, again presenting &quot;&lt;a href=&quot;http://www.sqe.com/AgileDevPracticesWest/Concurrent/Default.aspx?Day=Thursday#AT12&quot;&gt;The What's, Why's, and How's of Kanban&lt;/a&gt;.&quot; Yes, more of Tim yammering on and on (and on and on) about Kanban and how it will cure all that ails you, but this time I get to do that yammering in Vegas! I am really looking forward to this conference and the crowd that will be different from the normal developer type crowd at most of the conferences I attend.&lt;/p&gt;


      
    </content>
  </entry>
  
  <entry>
    <title>LSSC Video of My Kanban Experience Report</title>
    <link href="/2010/08/25/lssc-video-of-my-kanban-experience-report.html" />
    <updated>2010-08-25T00:00:00-04:00</updated>
    <id>/2010/08/25/lssc-video-of-my-kanban-experience-report</id>
    <content type="html">
      &lt;h2&gt;LSSC Video of My Kanban Experience Report&lt;/h2&gt;

&lt;p&gt;Back in April I was selected to give a Kanban experience report at Lean Software Systems Consortium in Atlanta, and as luck would have it InfoQ had set up a camera in the room I was presenting in. Yesterday, they posted it online:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/presentations/Moving-to-Kanban&quot;&gt;http://www.infoq.com/presentations/Moving-to-Kanban&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was the first time I was recorded giving a presentation, so it's the first time I've seen myself give a presentation. And I must say, I am one of the presenters I've ever seen! OK, maybe not, but it wasn't as embarrassing to watch myself as I thought it would be. Seeing myself at least let me see some things I can improve on. (Dear Lord, Tim...STAND STILL for a second.)&lt;/p&gt;

&lt;p&gt;And while I'm throwing some video out, Dave Giard recorded a video interview with me back at Codemash this past January. I finally got around to watching that one, too. For Dave's beer being off screen on one side and my bourbon off screen on the other side, it went pretty well.&lt;/p&gt;

&lt;p&gt;Dave's Technology and Friends, Episode 71:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://technologyandfriends.com/archive/2010/02/15/tf0071.aspx&quot;&gt;http://technologyandfriends.com/archive/2010/02/15/tf0071.aspx&lt;/a&gt;&lt;/p&gt;


      
    </content>
  </entry>
  
</feed>
